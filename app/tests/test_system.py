#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import requests
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import SessionLocal
from app.models.user import User
from app.models.role import Role, UserRole
from app.core.security import get_password_hash
from datetime import date

BASE_URL = "http://localhost:8000"

def check_existing_users():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    db = SessionLocal()
    try:
        users = db.query(User).all()
        
        if not users:
            print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return []
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        for user in users:
            print(f"\nüë§ ID: {user.id}")
            print(f"   Username: {user.username}")
            print(f"   Email: {user.email}")
            print(f"   Active: {user.is_active}")
            print(f"   Created: {user.created_at}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_roles = db.query(UserRole).filter(UserRole.user_id == user.id).all()
            if user_roles:
                print(f"   üé≠ –†–æ–ª–∏: {len(user_roles)}")
                for ur in user_roles:
                    role = db.query(Role).filter(Role.id == ur.role_id).first()
                    if role:
                        print(f"     - {role.name} ({role.code})")
            else:
                print("   üé≠ –†–æ–ª–∏: –Ω–µ—Ç")
        
        return users
    finally:
        db.close()

def create_proper_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüë§ –°–û–ó–î–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("-" * 50)
    
    user_data = {
        "username": "AdminUser",  # 8 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
        "email": "admin@example.com",
        "password": "Admin123!",  # 8+ —Å–∏–º–≤–æ–ª–æ–≤, —Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        "c_password": "Admin123!",
        "birthday": "2000-01-01"  # –í–æ–∑—Ä–∞—Å—Ç > 14 –ª–µ—Ç
    }
    
    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    response = requests.post(
        f"{BASE_URL}/auth/register",
        json=user_data
    )
    
    if response.status_code == 201:
        user = response.json()
        print("‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
        print(f"   ID: {user['id']}")
        print(f"   Username: {user['username']}")
        print(f"   Email: {user['email']}")
        return user
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        return None

def test_login(username, password):
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüîê –¢–ï–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò: {username}")
    
    login_data = {
        "username": username,
        "password": password
    }
    
    print(f"   –î–∞–Ω–Ω—ã–µ: {login_data}")
    response = requests.post(
        f"{BASE_URL}/auth/login",
        json=login_data
    )
    
    if response.status_code == 200:
        tokens = response.json()
        print("‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print(f"   Access Token: {tokens['access_token'][:30]}...")
        return tokens
    elif response.status_code == 422:
        print("‚ùå –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò:")
        errors = response.json().get('detail', [])
        for error in errors:
            print(f"   - {error['msg']} (–ø–æ–ª–µ: {error['loc']})")
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    
    return None

def assign_admin_role(user_id):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print(f"\nüé≠ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –†–û–õ–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (User ID: {user_id})")
    
    db = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_role = db.query(Role).filter(Role.code == "admin").first()
        if not admin_role:
            print("‚ùå –†–æ–ª—å 'admin' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ —É–∂–µ —Ä–æ–ª—å
        existing = db.query(UserRole).filter(
            UserRole.user_id == user_id,
            UserRole.role_id == admin_role.id
        ).first()
        
        if existing:
            print("‚úÖ –†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
            return True
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
        user_role = UserRole(
            user_id=user_id,
            role_id=admin_role.id,
            created_by=1  # –°–∏—Å—Ç–µ–º–∞
        )
        db.add(user_role)
        db.commit()
        
        print("‚úÖ –†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def test_protected_endpoints(access_token):
    """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîí –¢–ï–°–¢ –ó–ê–©–ò–©–ï–ù–ù–´–• –≠–ù–î–ü–û–ò–ù–¢–û–í")
    
    headers = {"Authorization": f"Bearer {access_token}"}
    
    endpoints = [
        ("/auth/me", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
        ("/api/ref/policy/role/", "–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π"),
        ("/api/ref/policy/permission/", "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"),
    ]
    
    for endpoint, description in endpoints:
        print(f"\nüì° {description}")
        response = requests.get(f"{BASE_URL}{endpoint}", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            if isinstance(data, list):
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –ó–∞–ø–∏—Å–µ–π: {len(data)}")
            else:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
                if 'username' in data:
                    print(f"     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['username']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = check_existing_users()
    
    # 2. –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    if not users:
        print("\nüí° –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user = create_proper_user()
        if not user:
            return
        user_id = user['id']
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = users[0]
        user_id = user.id
        print(f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
    
    # 3. –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    assign_admin_role(user_id)
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    tokens = test_login("AdminUser", "Admin123!")
    if not tokens:
        # –ü—Ä–æ–±—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if users:
            tokens = test_login(users[0].username, "Admin123!")
    
    if not tokens:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:")
        print("   http://localhost:8000/docs#/authentication/register_auth_register_post")
        return
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    test_protected_endpoints(tokens['access_token'])
    
    print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üìä –†–µ–∑—é–º–µ:")
    print("   - –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ë–î ‚úÖ")
    print("   - –°–æ–∑–¥–∞–Ω/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚úÖ") 
    print("   - –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚úÖ")
    print("   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚úÖ")
    print("   - –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ‚úÖ")

if __name__ == "__main__":
    main()