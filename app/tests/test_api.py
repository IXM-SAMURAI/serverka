import requests
import json

BASE_URL = "http://localhost:8000/api/auth"

def print_success(message):
    print(f"‚úÖ {message}")

def print_error(message):
    print(f"‚ùå {message}")

def print_info(message):
    print(f"‚ÑπÔ∏è  {message}")

def print_header(message):
    print(f"\n{'='*60}")
    print(f"üìã {message}")
    print(f"{'='*60}")

def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê")
    
    # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    user_data = {
        "username": "FinalUser",
        "email": "final@test.ru",
        "password": "Password123",
        "c_password": "Password123",
        "birthday": "2000-01-01"
    }
    
    response = requests.post(f"{BASE_URL}/register", json=user_data)
    if response.status_code == 201:
        print_success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢")
        user_info = response.json()
        print(f"   –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']}")
    else:
        print_error("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        return False
    
    # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    print("\n2. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
    login_data = {
        "username": "FinalUser",
        "password": "Password123"
    }
    
    response = requests.post(f"{BASE_URL}/login", json=login_data)
    if response.status_code == 200:
        tokens = response.json()
        access_token = tokens['access_token']
        refresh_token = tokens['refresh_token']
        print_success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"   –ü–æ–ª—É—á–µ–Ω—ã access_token –∏ refresh_token")
    else:
        print_error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        return False
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print("\n3. –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï")
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(f"{BASE_URL}/me", headers=headers)
    
    if response.status_code == 200:
        user_info = response.json()
        print_success("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']}, Email: {user_info['email']}")
    else:
        print_error(f"‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –ù–ï –†–ê–ë–û–¢–ê–ï–¢ ({response.status_code})")
        print(f"   –û—à–∏–±–∫–∞: {response.text}")
    
    return True

def test_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò")
    
    test_cases = [
        {
            "name": "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "data": {
                "username": "ValidUser",
                "email": "valid@test.ru",
                "password": "Password123",
                "c_password": "Password123",
                "birthday": "2000-01-01"
            },
            "expected_code": 201
        },
        {
            "name": "–î—É–±–ª–∏–∫–∞—Ç username",
            "data": {
                "username": "ValidUser",  # –¢–∞–∫–æ–π –∂–µ username
                "email": "valid2@test.ru",
                "password": "Password123",
                "c_password": "Password123",
                "birthday": "2000-01-01"
            },
            "expected_code": 400
        },
        {
            "name": "–î—É–±–ª–∏–∫–∞—Ç email",
            "data": {
                "username": "ValidUser2",
                "email": "valid@test.ru",  # –¢–∞–∫–æ–π –∂–µ email
                "password": "Password123",
                "c_password": "Password123",
                "birthday": "2000-01-01"
            },
            "expected_code": 400
        },
        {
            "name": "–í–æ–∑—Ä–∞—Å—Ç –º–µ–Ω–µ–µ 14 –ª–µ—Ç",
            "data": {
                "username": "YoungUser",
                "email": "young@test.ru",
                "password": "Password123",
                "c_password": "Password123",
                "birthday": "2020-01-01"  # –ú–µ–Ω—å—à–µ 14 –ª–µ—Ç
            },
            "expected_code": 422
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        response = requests.post(f"{BASE_URL}/register", json=test_case['data'])
        
        if response.status_code == test_case['expected_code']:
            print_success("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print_error(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ {test_case['expected_code']}, –ø–æ–ª—É—á–µ–Ω {response.status_code}")

def test_error_messages():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô –û–ë –û–®–ò–ë–ö–ê–•")
    
    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    print("\n1. –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–†–û–õ–¨")
    response = requests.post(f"{BASE_URL}/login", json={
        "username": "FinalUser",
        "password": "WrongPassword"
    })
    if response.status_code == 401:
        print_success("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print_error("‚ùå –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username
    print("\n2. –í–ê–õ–ò–î–ê–¶–ò–Ø USERNAME")
    response = requests.post(f"{BASE_URL}/register", json={
        "username": "user123",  # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã
        "email": "test123@test.ru",
        "password": "Password123",
        "c_password": "Password123",
        "birthday": "2000-01-01"
    })
    if response.status_code == 422:
        error_data = response.json()
        if any("–±—É–∫–≤—ã" in str(error) for error in error_data['detail']):
            print_success("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è username: –†–ê–ë–û–¢–ê–ï–¢")
        else:
            print_error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è username: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print_error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è username: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")

def generate_final_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print_header("–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –õ–ê–ë–û–†–ê–¢–û–†–ù–û–ô –†–ê–ë–û–¢–ï ‚Ññ2")
    print("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("\n" + "="*60)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    basic_working = test_basic_functionality()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    test_validation()
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    test_error_messages()
    
    print_header("–í–´–í–û–î–´ –ò –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    
    print("\nüéØ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:")
    print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –≤—ã–¥–∞—á–µ–π JWT —Ç–æ–∫–µ–Ω–æ–≤") 
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è username (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –ø–µ—Ä–≤–∞—è –∑–∞–≥–ª–∞–≤–Ω–∞—è)")
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (–º–∏–Ω. 8 —Å–∏–º–≤–æ–ª–æ–≤, —Ü–∏—Ñ—Ä—ã, —Ä–∞–∑–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã)")
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ (–º–∏–Ω. 14 –ª–µ—Ç)")
    print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ username/email")
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    print("‚úÖ –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ /api/auth")
    
    print("\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ù–´–ï –ú–û–ú–ï–ù–¢–´:")
    print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–∑—ã–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤ (logout)")
    print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å refresh —Ç–æ–∫–µ–Ω–∞–º–∏")
    print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–∏–º–∏—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≤—ã—Ö–æ–¥–æ–º –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    
    print("\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
    if basic_working:
        print("‚úÖ –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –†–ê–ë–û–¢–ê–ï–¢")
        print("üìç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        print("üíØ –õ–ê–ë–û–†–ê–¢–û–†–ù–ê–Ø –†–ê–ë–û–¢–ê: –ó–ê–ß–¢–ï–ù–ê (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)")
    else:
        print("‚ùå –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("üíØ –õ–ê–ë–û–†–ê–¢–û–†–ù–ê–Ø –†–ê–ë–û–¢–ê: –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    
    print("\nüéì –î–õ–Ø –ó–ê–©–ò–¢–´:")
    print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤") 
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    print("4. –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
    print("5. –û–±—ä—è—Å–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É JWT —Ç–æ–∫–µ–Ω–æ–≤")
    
    print(f"\n{'='*60}")
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    generate_final_report()